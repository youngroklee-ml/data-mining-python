[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Mining with Python",
    "section": "",
    "text": "1 Preface\nThis is a book to convert example code on https://youngroklee-ml.github.io/data-mining-techniques/ into Python.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "ch02_regression.html",
    "href": "ch02_regression.html",
    "title": "2  Regression",
    "section": "",
    "text": "2.1 Examples 2.3 - 2.5, 2.7, 2.10 - 2.11",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Regression</span>"
    ]
  },
  {
    "objectID": "ch02_regression.html#examples-2.3---2.5-2.7-2.10---2.11",
    "href": "ch02_regression.html#examples-2.3---2.5-2.7-2.10---2.11",
    "title": "2  Regression",
    "section": "",
    "text": "2.1.1 Load data\n\ndat1 = pd.read_csv(\"data/ch2_reg1.csv\")\n\n# print data\ndat1\n\n\n\n\n\n\n\n\n\nID\nage\nheight\nweight\n\n\n\n\n0\n1\n21\n170\n60\n\n\n1\n2\n47\n167\n65\n\n\n2\n3\n36\n173\n67\n\n\n3\n4\n15\n165\n54\n\n\n4\n5\n54\n168\n73\n\n\n5\n6\n25\n177\n71\n\n\n6\n7\n32\n169\n68\n\n\n7\n8\n18\n172\n62\n\n\n8\n9\n43\n171\n66\n\n\n9\n10\n28\n175\n68\n\n\n\n\n\n\n\n\n\n\n2.1.2 Ex 2.3: Regression coefficient\nDefine a linear regression model with smf.ols() by passing formula string and training data as arguments.\n\nmodel = smf.ols(\"weight ~ age + height\", data = dat1)\n\nEstimate the model by calling fit() method.\n\nmodel_fit = model.fit()\n\nLet’s see a summary of model estimation results.\n\nmodel_fit.summary()\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=10\n  res = hypotest_fun_out(*samples, **kwds)\n\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nweight\nR-squared:\n0.822\n\n\nModel:\nOLS\nAdj. R-squared:\n0.771\n\n\nMethod:\nLeast Squares\nF-statistic:\n16.13\n\n\nDate:\nSun, 16 Jun 2024\nProb (F-statistic):\n0.00239\n\n\nTime:\n18:55:05\nLog-Likelihood:\n-22.163\n\n\nNo. Observations:\n10\nAIC:\n50.33\n\n\nDf Residuals:\n7\nBIC:\n51.23\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-108.1672\n42.123\n-2.568\n0.037\n-207.772\n-8.563\n\n\nage\n0.3291\n0.069\n4.753\n0.002\n0.165\n0.493\n\n\nheight\n0.9553\n0.244\n3.914\n0.006\n0.378\n1.532\n\n\n\n\n\n\nOmnibus:\n0.731\nDurbin-Watson:\n1.196\n\n\nProb(Omnibus):\n0.694\nJarque-Bera (JB):\n0.620\n\n\nSkew:\n0.477\nProb(JB):\n0.733\n\n\nKurtosis:\n2.239\nCond. No.\n8.72e+03\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 8.72e+03. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nCoefficient estimates can be accessed with params attribute.\n\nmodel_fit.params\n\nIntercept   -108.167199\nage            0.329121\nheight         0.955291\ndtype: float64\n\n\n\n\n2.1.3 Ex 2.4: Variance of error terms\nscale attribute represents the estimate of error variance.\n\nmodel_fit.scale\n\nnp.float64(7.038464456795462)\n\n\n\n\n2.1.4 Ex 2.5: Test a model\nUse anova_lm() from statsmodels.api.stats module and pass the fitted linear regression model to conduct ANOVA test.\n\nsm.stats.anova_lm(model_fit)\n\n\n\n\n\n\n\n\n\ndf\nsum_sq\nmean_sq\nF\nPR(&gt;F)\n\n\n\n\nage\n1.0\n119.299334\n119.299334\n16.949625\n0.004476\n\n\nheight\n1.0\n107.831415\n107.831415\n15.320304\n0.005793\n\n\nResidual\n7.0\n49.269251\n7.038464\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n\n2.1.5 Ex 2.7 Test regression coefficients\nOne of tables from summary() output represents coefficient-level statistics including t-test statstics.\n\nmodel_fit.summary().tables[1]\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=10\n  res = hypotest_fun_out(*samples, **kwds)\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-108.1672\n42.123\n-2.568\n0.037\n-207.772\n-8.563\n\n\nage\n0.3291\n0.069\n4.753\n0.002\n0.165\n0.493\n\n\nheight\n0.9553\n0.244\n3.914\n0.006\n0.378\n1.532\n\n\n\n\n\n\n\n\n2.1.6 Ex 2.10 - 2.11 Mean prediction, confidence interval and prediction interval\nVariance-covariance matrix of coefficients:\n\nmodel_fit.cov_params()\n\n\n\n\n\n\n\n\n\nIntercept\nage\nheight\n\n\n\n\nIntercept\n1774.328062\n-0.671107\n-10.264885\n\n\nage\n-0.671107\n0.004795\n0.003035\n\n\nheight\n-10.264885\n0.003035\n0.059567\n\n\n\n\n\n\n\n\nCreate new data to predict:\n\nnewdata = pd.DataFrame({'age': [40, ], 'height': [170, ]})\n\nPredict mean response by calling predict() method.\n\nmodel_fit.predict(newdata)\n\n0    67.397178\ndtype: float64\n\n\nLet’s also get 95% confidence interval of mean response and 95% prediction interval. To do so, first let’s produce a prediction object by calling get_prediction() method.\n\nprediction_results = model_fit.get_prediction(newdata)\n\nsummary_frame() method produces data frame that include mean prediction, confidence interval, and prediction interval. To compute 95% confidence/prediction intervals, pass alpha=0.95 as an argument.\n\nprediction_results.summary_frame(alpha=0.95)\n\n\n\n\n\n\n\n\n\nmean\nmean_se\nmean_ci_lower\nmean_ci_upper\nobs_ci_lower\nobs_ci_upper\n\n\n\n\n0\n67.397178\n1.006575\n67.331762\n67.462594\n67.21277\n67.581587",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Regression</span>"
    ]
  },
  {
    "objectID": "ch02_regression.html#example-2.14-2.16",
    "href": "ch02_regression.html#example-2.14-2.16",
    "title": "2  Regression",
    "section": "2.2 Example 2.14, 2.16",
    "text": "2.2 Example 2.14, 2.16\n\n2.2.1 Load data\n\ndat1 = pd.read_csv(\"data/ch2_coil.csv\")\ndat1\n\n\n\n\n\n\n\n\n\ntemp\nthick\ny\n\n\n\n\n0\n540\n2\n52.5\n\n\n1\n660\n2\n50.2\n\n\n2\n610\n2\n51.3\n\n\n3\n710\n2\n49.1\n\n\n4\n570\n6\n50.8\n\n\n5\n700\n6\n48.7\n\n\n6\n560\n6\n51.2\n\n\n7\n600\n6\n50.8\n\n\n8\n680\n6\n49.3\n\n\n9\n530\n6\n51.5\n\n\n\n\n\n\n\n\n\n\n2.2.2 Ex 2.14: Estimate a model with an indicator variable\nUsing C() inside a formula means that the variable will be considered as a categorical variable. In such case, dummy variables are automatically created during the process of model estimation. Inside C(), you can pass the second argument Treatment(reference=6) to specify 6 as a base category, so the dummy variable value is 0 when original variable value is 6.\n\nmodel_fit = smf.ols(\"y ~ temp + C(thick, Treatment(reference=6))\", data=dat1).fit()\n\nLet’s check the estimated regression coefficients.\n\nmodel_fit.summary().tables[1]\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=10\n  res = hypotest_fun_out(*samples, **kwds)\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n61.1080\n0.703\n86.864\n0.000\n59.444\n62.771\n\n\nC(thick, Treatment(reference=6))[T.2]\n0.8042\n0.150\n5.376\n0.001\n0.450\n1.158\n\n\ntemp\n-0.0177\n0.001\n-15.380\n0.000\n-0.020\n-0.015\n\n\n\n\n\n\n\n\n2.2.3 Ex 2.16: Interaction term\nUse * to estimate not only main effects but only interactions.\n\nmodel_fit = smf.ols(\"y ~ temp*C(thick, Treatment(reference=6))\", data=dat1).fit()\nmodel_fit.summary().tables[1]\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=10\n  res = hypotest_fun_out(*samples, **kwds)\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n60.1364\n0.750\n80.187\n0.000\n58.301\n61.971\n\n\nC(thick, Treatment(reference=6))[T.2]\n3.2785\n1.210\n2.708\n0.035\n0.317\n6.240\n\n\ntemp\n-0.0161\n0.001\n-13.074\n0.000\n-0.019\n-0.013\n\n\ntemp:C(thick, Treatment(reference=6))[T.2]\n-0.0040\n0.002\n-2.055\n0.086\n-0.009\n0.001",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Regression</span>"
    ]
  }
]